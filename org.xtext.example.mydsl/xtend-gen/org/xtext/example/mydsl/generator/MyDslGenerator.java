/**
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.generator;

import fMS.FSM;
import fMS.FinalState;
import fMS.InitState;
import fMS.State;
import fMS.Transition;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    fsa.generateFile("AbstractState.java", this.generateAbstractStateModel());
    fsa.generateFile("State.java", this.generateStateModel());
    EObject _get = resource.getContents().get(0);
    FSM fsm = ((FSM) _get);
    fsa.generateFile("Transition.java", this.generateTransitionModel());
    fsa.generateFile("FSM.java", this.generateFSM(fsm));
  }
  
  public String generateAbstractStateModel() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("import java.util.Objects;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("public abstract class AbstractState {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String name;");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public AbstractState(String name) {");
    _builder.newLine();
    _builder.append("\t\t            ");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getName() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return name;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setName(String name) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean equals(Object o) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (this == o) return true;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (o == null || getClass() != o.getClass()) return false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("AbstractState that = (AbstractState) o;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Objects.equals(name, that.name);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int hashCode() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Objects.hash(name);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String generateStateModel() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class State extends AbstractState {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public State(String name) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(name);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String generateTransitionModel() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class Transition {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private AbstractState src;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private AbstractState target;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String trigger;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Transition(AbstractState src, AbstractState target, String trigger) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.src = src;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.target = target;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.trigger = trigger;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public AbstractState getSrc() { return this.src; }");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public AbstractState getTarget() { return this.target; }");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getTrigger() { return this.trigger; }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String generateFSM(final FSM fms) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.Scanner;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("public class FSM {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void execute() {");
    _builder.newLine();
    _builder.append("\t\t");
    String _generateMain = this.generateMain(fms);
    _builder.append(_generateMain, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("FSM fsm = new FSM();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("fsm.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String generateMain(final FSM fms) {
    final Function1<State, Boolean> _function = (State state) -> {
      return Boolean.valueOf((state instanceof InitState));
    };
    State initState = ((State[])Conversions.unwrapArray(IterableExtensions.<State>filter(fms.getState(), _function), State.class))[0];
    final Function1<State, Boolean> _function_1 = (State state) -> {
      return Boolean.valueOf((state instanceof FinalState));
    };
    State finalState = ((State[])Conversions.unwrapArray(IterableExtensions.<State>filter(fms.getState(), _function_1), State.class))[0];
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("List<Transition> transitions = new ArrayList<>();");
    _builder.newLine();
    {
      EList<Transition> _transition = fms.getTransition();
      for(final Transition tr : _transition) {
        _builder.append("transitions.add(new Transition(new State(\"");
        String _name = tr.getStateStart().getName();
        _builder.append(_name);
        _builder.append("\"), new State(\"");
        String _name_1 = tr.getStateEnd().getName();
        _builder.append(_name_1);
        _builder.append("\"), \"");
        String _name_2 = tr.getName();
        _builder.append(_name_2);
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("Scanner sc = new Scanner(System.in);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("AbstractState current = new State(\"");
    String _name_3 = initState.getName();
    _builder.append(_name_3);
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("AbstractState finalState = new State(\"");
    String _name_4 = finalState.getName();
    _builder.append(_name_4);
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("System.out.println(\"Bonjour\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("while(!current.equals(finalState)) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("System.out.println(\"State current : \" + current.getName());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("final AbstractState currentState = current;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("final String trigger = sc.nextLine(); ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Transition transition = transitions.stream()");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append(".filter(tr -> tr.getSrc().equals(currentState) && tr.getTrigger().equals(trigger))");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append(".findFirst().orElse(null);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (transition != null) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("current = transition.getTarget();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("System.out.println(\"Transition null\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("System.out.println(\"nouveau state : \" + current.getName());");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("System.out.println(\"Arrivé à l\'etat final\");");
    _builder.newLine();
    _builder.append("System.out.println(\"Fin\");");
    _builder.newLine();
    return _builder.toString();
  }
}
