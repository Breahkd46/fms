/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import fMS.FSM
import fMS.InitState
import fMS.FinalState
import fMS.State
import java.util.ArrayList
import fMS.Transition
import java.util.Set

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		// Model 
		fsa.generateFile('AbstractState.java', generateAbstractStateModel)
		fsa.generateFile('State.java', generateStateModel)
		fsa.generateFile('InitState.java', generateInitStateModel)
		fsa.generateFile('FinalState.java', generateFinalStateModel)		
		
		var fsm = resource.contents.get(0) as FSM
		fsa.generateFile('Transition.java', generateTransitionModel)
		fsa.generateFile('FMS.java', generateFSM(fsm))
		
	}
	
	def String generateAbstractStateModel() { 
		return '''
			
			import java.util.Objects;
						
			public abstract class AbstractState {
			    private String name;
			    
			    public AbstractState(String name) {
		            this.name = name;
		        }
			
			    public String getName() {
			        return name;
			    }
			
			    public void setName(String name) {
			        this.name = name;
			    }
			
			    @Override
			    public boolean equals(Object o) {
			        if (this == o) return true;
			        if (o == null || getClass() != o.getClass()) return false;
			        AbstractState that = (AbstractState) o;
			        return Objects.equals(name, that.name);
			    }
			
			    @Override
			    public int hashCode() {
			        return Objects.hash(name);
			    }
			}
		'''
	}
	def String generateStateModel() {
		return '''
			public class State extends AbstractState {}
		'''
	}
	
	def String generateInitStateModel() { 
		return '''
			public class InitState extends AbstractState {
				public InitState() {
					this();
				}
			}
		'''
	}
	
	def String generateFinalStateModel() { 
		return '''
			public class FinalState extends AbstractState {}
		'''
	}
	
	def String generateTransitionModel() { 
		return '''
			public class Transition {
				private AbstractState src;
				private AbstractState target;
				private String trigger;
				
				public Transition(AbstractState src, AbstractState target, String trigger) {
					this.src = src;
					this.target = target;
					this.trigger = trigger;
				}
				
				public AbstractState getSrc() { return this.src; }
				public AbstractState getTarget() { return this.target; }
				public String getTrigger() { return this.trigger; }
			}
		'''
	}
	
	def String generateFSM(FSM fms) {
		return '''
			import java.util.Scanner;
			import java.util.List;
			import java.util.ArrayList;
			public class FSM {
				
				public void execute() {
					«generateMain(fms)»
				}
				
				public static void main(String[] args) {
					FSM fsm = new FSM();
					this.execute();
				}
				

			}
		'''
	}
	
	def generateMain(FSM fms) {
		var initState = fms.state.filter[state | state instanceof InitState].get(0);
		var finalState = fms.state.filter[state | state instanceof FinalState].get(0);
		return '''
			List<Transition> transitions = new ArrayList<>();
			«FOR tr: fms.transition »
				transitions.add(new Transition(new State("«tr.stateStart.name»"), new State("«tr.stateEnd.name»"), "«tr.name»"));
			«ENDFOR»
			Scanner sc = new Scanner(System.in);
			
			AbstractState current = new InitState("«initState.name»");
			AbstractState finalState = new FinalState("«finalState.name»");
			System.out.println("Bonjour");
			
			while(current.equals(finalState)) {
				System.out.println("State current : " + current);
				final String currentState = current;
				final String trigger = sc.nextLine(); 
				Transition transition = transitions.stream()
									.filter(tr -> tr.getSrc().equals(currentState) && tr.getTrigger().equals(trigger))
									.findFirst().orElse(null);
				if (transition != null) {
					current = transition.getTarget();
				} else {
					System.out.println("Transition null");
				}
				System.out.println("nouveau state : " + current);
			}
			System.out.println("Arrivé à l'etat final");
			System.out.println("Fin");
		'''
	}
}

