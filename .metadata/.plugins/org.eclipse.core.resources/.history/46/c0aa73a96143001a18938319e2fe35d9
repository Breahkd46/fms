/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import fMS.FSM
import fMS.InitState
import fMS.FinalState
import fMS.State
import java.util.ArrayList
import fMS.Transition
import java.util.Set

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		// Model 
//		fsa.generateFile('AbstractState.java', generateAbstractStateModel)
//		fsa.generateFile('State.java', generateStateModel)
//		fsa.generateFile('InitState.java', generateInitStateModel)
//		fsa.generateFile('FinalState.java', generateFinalStateModel)		
		
		var fsm = resource.contents.get(0) as FSM
		fsa.generateFile('Transition.java', generateTransitionModel)
		fsa.generateFile('FMS.java', generateFSM(fsm))
		
	}
	
//	def String generateAbstractStateModel() { 
//		return '''
//			public class AbstractState {
//				private String name;
//				
//				public String getName();
//			}
//		'''
//	}
//	def String generateStateModel() {
//		return '''
//			public class State implements AbstractState{
//				private String name;
//				
//				public State(String name) {
//					this.name = name;
//				}
//				public String getName() {
//					return name;
//				}
//			}
//		'''
//	}
//	
//	def String generateInitStateModel() { 
//		return '''
//			public class InitState implements AbstractState {
//				private String name;
//				
//				public InitState(String name) {
//					this.name = name;
//				}
//				public String getName() {
//					return name;
//				}
//				
//			}
//		'''
//	}
//	
//	def String generateFinalStateModel() { 
//		return '''
//			public class FinalState implements AbstractState {
//				private String name;
//				public FinalState(String name) {
//					this.name = name;
//				}
//				public String getName() {
//					return name;
//				}
//			}
//		'''
//	}
	
	def String generateTransitionModel() { 
		return '''
			public class Transition {
				private String src;
				private String target;
				private String trigger;
				
				public Transition(String src, String target, String trigger) {
					this.src = src;
					this.target = target;
					this.trigger = trigger;
				}
				
				public String getSrc() { return this.src; }
				public String getTarget() { return this.target; }
				public String getTrigger() { return this.trigger; }
			}
		'''
	}
	
	def String generateFSM(FSM fms) {
		return '''
			import java.util.Scanner;
			public class FMS {
				
				public static void main(String[] args) {
					«generateMain(fms)»
				}

			}
		'''
	}
	
	def generateMain(FSM fms) {
		var initState = fms.state.filter[state | state instanceof InitState].get(0);
		var finalState = fms.state.filter[state | state instanceof FinalState].get(0);
		return '''
			«FOR tr: fms.transition »
				transitions.add(new Transition("«tr.stateStart.name»", "«tr.stateEnd.name»", "«tr.name»"));
			«ENDFOR»
			Scanner sc = new Scanner(System.in);
			
			String current = "«initState.name»"
			Systeme.out.println("Bonjour");
			while(current != "«finalState.name»") {
				Systeme.out.println("State current : " + current);
				String trigger = sc.nextLine(); 
				Transition transition = transitions.stream()
									.filter(tr -> tr.getSrc().equals(current) && tr.getTrigger().equals(trigger))
									.findFirst().orElse(null);
				if (transition != null) {
					current = transition.getTarget();
				}
				Systeme.out.println("nouveau state : " + current);
			}
			Systeme.out.println("Arrivé à l'etat final");
			Systeme.out.println("Fin");
		'''
	}
}

